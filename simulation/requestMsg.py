#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'requestMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 114

# The Active Message type associated with this message.
AM_TYPE = 27

class requestMsg(tinyos.message.Message.Message):
    # Create a new requestMsg of size 114.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=114):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <requestMsg> \n"
        try:
            s += "  [mode=0x%x]\n" % (self.get_mode())
        except:
            pass
        try:
            s += "  [requestID=0x%x]\n" % (self.get_requestID())
        except:
            pass
        try:
            s += "  [dataSize=0x%x]\n" % (self.get_dataSize())
        except:
            pass
        try:
            s += "  [routingMessage=";
            for i in range(0, 108):
                s += "0x%x " % (self.getElement_routingMessage(i) & 0xff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: mode
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'mode' is signed (False).
    #
    def isSigned_mode(self):
        return False
    
    #
    # Return whether the field 'mode' is an array (False).
    #
    def isArray_mode(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'mode'
    #
    def offset_mode(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'mode'
    #
    def offsetBits_mode(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'mode'
    #
    def get_mode(self):
        return self.getUIntElement(self.offsetBits_mode(), 8, 1)
    
    #
    # Set the value of the field 'mode'
    #
    def set_mode(self, value):
        self.setUIntElement(self.offsetBits_mode(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'mode'
    #
    def size_mode(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'mode'
    #
    def sizeBits_mode(self):
        return 8
    
    #
    # Accessor methods for field: requestID
    #   Field type: long
    #   Offset (bits): 8
    #   Size (bits): 32
    #

    #
    # Return whether the field 'requestID' is signed (False).
    #
    def isSigned_requestID(self):
        return False
    
    #
    # Return whether the field 'requestID' is an array (False).
    #
    def isArray_requestID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'requestID'
    #
    def offset_requestID(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'requestID'
    #
    def offsetBits_requestID(self):
        return 8
    
    #
    # Return the value (as a long) of the field 'requestID'
    #
    def get_requestID(self):
        return self.getUIntElement(self.offsetBits_requestID(), 32, 1)
    
    #
    # Set the value of the field 'requestID'
    #
    def set_requestID(self, value):
        self.setUIntElement(self.offsetBits_requestID(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'requestID'
    #
    def size_requestID(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'requestID'
    #
    def sizeBits_requestID(self):
        return 32
    
    #
    # Accessor methods for field: dataSize
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'dataSize' is signed (False).
    #
    def isSigned_dataSize(self):
        return False
    
    #
    # Return whether the field 'dataSize' is an array (False).
    #
    def isArray_dataSize(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dataSize'
    #
    def offset_dataSize(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'dataSize'
    #
    def offsetBits_dataSize(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'dataSize'
    #
    def get_dataSize(self):
        return self.getUIntElement(self.offsetBits_dataSize(), 8, 1)
    
    #
    # Set the value of the field 'dataSize'
    #
    def set_dataSize(self, value):
        self.setUIntElement(self.offsetBits_dataSize(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dataSize'
    #
    def size_dataSize(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'dataSize'
    #
    def sizeBits_dataSize(self):
        return 8
    
    #
    # Accessor methods for field: routingMessage
    #   Field type: short[]
    #   Offset (bits): 48
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'routingMessage' is signed (False).
    #
    def isSigned_routingMessage(self):
        return False
    
    #
    # Return whether the field 'routingMessage' is an array (True).
    #
    def isArray_routingMessage(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'routingMessage'
    #
    def offset_routingMessage(self, index1):
        offset = 48
        if index1 < 0 or index1 >= 108:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'routingMessage'
    #
    def offsetBits_routingMessage(self, index1):
        offset = 48
        if index1 < 0 or index1 >= 108:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'routingMessage' as a short[]
    #
    def get_routingMessage(self):
        tmp = [None]*108
        for index0 in range (0, self.numElements_routingMessage(0)):
                tmp[index0] = self.getElement_routingMessage(index0)
        return tmp
    
    #
    # Set the contents of the array 'routingMessage' from the given short[]
    #
    def set_routingMessage(self, value):
        for index0 in range(0, len(value)):
            self.setElement_routingMessage(index0, value[index0])

    #
    # Return an element (as a short) of the array 'routingMessage'
    #
    def getElement_routingMessage(self, index1):
        return self.getUIntElement(self.offsetBits_routingMessage(index1), 8, 1)
    
    #
    # Set an element of the array 'routingMessage'
    #
    def setElement_routingMessage(self, index1, value):
        self.setUIntElement(self.offsetBits_routingMessage(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'routingMessage'
    #
    def totalSize_routingMessage(self):
        return (864 / 8)
    
    #
    # Return the total size, in bits, of the array 'routingMessage'
    #
    def totalSizeBits_routingMessage(self):
        return 864
    
    #
    # Return the size, in bytes, of each element of the array 'routingMessage'
    #
    def elementSize_routingMessage(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'routingMessage'
    #
    def elementSizeBits_routingMessage(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'routingMessage'
    #
    def numDimensions_routingMessage(self):
        return 1
    
    #
    # Return the number of elements in the array 'routingMessage'
    #
    def numElements_routingMessage():
        return 108
    
    #
    # Return the number of elements in the array 'routingMessage'
    # for the given dimension.
    #
    def numElements_routingMessage(self, dimension):
        array_dims = [ 108,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'routingMessage' with a String
    #
    def setString_routingMessage(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_routingMessage(i, ord(s[i]));
         self.setElement_routingMessage(l, 0) #null terminate
    
    #
    # Read the array 'routingMessage' as a String
    #
    def getString_routingMessage(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_routingMessage(i) == chr(0):
                break
            carr += self.getElement_routingMessage(i)
        return carr
    
